name: dockercompose16353442507624643927
services:
  bookstore.api:
    build:
      context: D:\Project\ASP.NET\BookStore
      dockerfile: BookStore.API/Dockerfile
      args:
        BUILD_CONFIGURATION: Debug
        LAUNCHING_FROM_VS: "true"
      labels:
        com.microsoft.created-by: visual-studio
        com.microsoft.visual-studio.project-name: BookStore.API
      target: base
    container_name: bookstore.api
    depends_on:
      redis:
        condition: service_started
        required: true
      sqlserver:
        condition: service_started
        required: true
    entrypoint:
      - dotnet
      - --roll-forward
      - Major
      - /VSTools/DistrolessHelper/DistrolessHelper.dll
      - --wait
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_HTTP_PORTS: "8080"
      ASPNETCORE_HTTPS_PORTS: "8081"
      ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS: "true"
      ConnectionStrings__DefaultConnection: Server=sqlserver;Database=BookStore;User=sa;Password=PassSQL123!;TrustServerCertificate=True;
      DOTNET_USE_POLLING_FILE_WATCHER: "1"
      NUGET_FALLBACK_PACKAGES: /.nuget/fallbackpackages
      Redis__Configuration: redis:6379
    image: bookstoreapi:dev
    labels:
      com.microsoft.visualstudio.debuggee.arguments: ' --additionalProbingPath /.nuget/packages --additionalProbingPath /.nuget/fallbackpackages  "/app/bin/Debug/net9.0/BookStore.API.dll"'
      com.microsoft.visualstudio.debuggee.killprogram: dotnet --roll-forward Major /VSTools/DistrolessHelper/DistrolessHelper.dll --stop dotnet
      com.microsoft.visualstudio.debuggee.program: dotnet
      com.microsoft.visualstudio.debuggee.workingdirectory: /app
    networks:
      backend: null
    ports:
      - mode: ingress
        target: 5000
        published: "5000"
        protocol: tcp
      - mode: ingress
        target: 8080
        protocol: tcp
      - mode: ingress
        target: 8081
        protocol: tcp
    tty: true
    volumes:
      - type: bind
        source: C:\Users\kuros\AppData\Roaming\Microsoft\UserSecrets
        target: /home/app/.microsoft/usersecrets
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\kuros\AppData\Roaming\Microsoft\UserSecrets
        target: /root/.microsoft/usersecrets
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\kuros\AppData\Roaming\ASP.NET\Https
        target: /home/app/.aspnet/https
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\kuros\AppData\Roaming\ASP.NET\Https
        target: /root/.aspnet/https
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: D:\Project\ASP.NET\BookStore\BookStore.API
        target: /app
        bind:
          create_host_path: true
      - type: bind
        source: D:\Project\ASP.NET\BookStore
        target: /src
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\kuros\vsdbg\vs2017u5
        target: /remote_debugger
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\kuros\.nuget\packages
        target: /.nuget/packages
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages
        target: /.nuget/fallbackpackages
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: D:\Work\VisualStudio22Enterprise\MSBuild\Sdks\Microsoft.Docker.Sdk\tools\linux-x64\net6.0
        target: /VSTools
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: D:\Work\VisualStudio22Enterprise\Common7\IDE\CommonExtensions\Microsoft\HotReload
        target: /HotReloadAgent
        read_only: true
        bind:
          create_host_path: true
  redis:
    container_name: redis
    image: redis:latest
    networks:
      backend: null
    ports:
      - mode: ingress
        target: 6379
        published: "6379"
        protocol: tcp
  sqlserver:
    container_name: sqlserver
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: PassSQL123!
    image: mcr.microsoft.com/mssql/server:2019-latest
    networks:
      backend: null
    ports:
      - mode: ingress
        target: 1433
        published: "11433"
        protocol: tcp
    volumes:
      - type: volume
        source: sqlserverdata
        target: /var/opt/mssql
        volume: {}
networks:
  backend:
    name: dockercompose16353442507624643927_backend
    driver: bridge
volumes:
  sqlserverdata:
    name: dockercompose16353442507624643927_sqlserverdata